import org.apache.tools.ant.filters.ReplaceTokens

buildscript {
    repositories {
        maven { url = 'https://repo.spongepowered.org/maven' }
        maven { url = 'https://plugins.gradle.org/m2/' }
        maven { url = 'https://files.minecraftforge.net/maven' }
    }

    dependencies {
        // classpath "io.freefair.gradle:lombok-plugin:2.5.0"
        classpath "net.minecraftforge.gradle:ForgeGradle:${project.forgeGradleVersion}"
        classpath "org.spongepowered:mixingradle:${project.mixinGradleVersion}"
        classpath "com.github.jengelman.gradle.plugins:shadow:2.0.0"
    }
}

def getVersionFromJava() {
    def ver = 0.0, patch = 0
    def versionClass = file("src/main/java/me/deftware/client/framework/FrameworkConstants.java").text
    (versionClass =~ ~/double\s+([_a-zA-Z\u0024][_a-zA-Z0-9\u0024]*)\s+=\s+(([0-9]+)\.([0-9]+))/).each {
        ver = it[2]
    }
    (versionClass =~ ~/int\s+([_a-zA-Z$][_a-zA-Z0-9$]*)\s+=\s+([0-9]+)/).each {
        if (it[1].toString() == "PATCH") {
            patch = it[2]
        }
    }
    return "${ver}.${patch}".toString()
}

def forgeBuild = project.hasProperty('forgebuild') ? project.property('forgebuild').toBoolean() : false

group = 'me.deftware'
version = getVersionFromJava()

// apply plugin: 'io.freefair.lombok'
apply plugin: 'maven'
apply plugin: 'java'
if (forgeBuild) {
    apply plugin: 'net.minecraftforge.gradle.forge'
} else {
    apply plugin: 'net.minecraftforge.gradle.tweaker-client'
}
apply plugin: 'org.spongepowered.mixin'
apply plugin: "com.github.johnrengelman.shadow"

sourceCompatibility = targetCompatibility = 1.8
compileJava {
    sourceCompatibility = targetCompatibility = 1.8
}

gradle.projectsEvaluated {
    tasks.withType(JavaCompile) {
        options.compilerArgs << "-Xmaxerrs" << "3000"
    }
}

minecraft {
    version = forgeBuild ? project.minecraftVersion + project.forgeVersion : project.minecraftVersion
    runDir = 'run'
    mappings = project.mappingsVer
    useDepAts = true
    makeObfSourceJar = true
    if (!forgeBuild) {
        tweakClass = 'me.deftware.launch.Launcher'
    }
}

repositories {
    mavenCentral()
    maven { url = 'https://repo.spongepowered.org/maven/' }
    maven { url 'https://libraries.minecraft.net/' }
    maven { url 'https://gitlab.com/EMC-Framework/maven/raw/master/' }
}

configurations {
    deps
    compile {
        extendsFrom deps
    }
}

dependencies {
    compile('org.spongepowered:mixin:0.7.11-SNAPSHOT') {
        exclude module: 'launchwrapper'
        exclude module: 'guava'
        exclude module: 'gson'
        exclude module: 'commons-io'
    }
    compile 'com.mojang:brigadier:1.0.17'
    compile 'it.unimi.dsi:fastutil:8.4.1'
}

mixin {
    defaultObfuscationEnv forgeBuild ? searge : notch
    add sourceSets.main, "mixins.emc.refmap.json"
}

tasks.jar.configure {
    classifier = 'default'
}

shadowJar {
    dependencies {
        include(dependency('org.spongepowered:mixin'))
        include(dependency('com.mojang:brigadier'))
    }
    classifier = null
}

task createPom << {
    pom {
        project {
            groupId "me.deftware"
            artifactId "EMC"
            version "${version}-${project.minecraftVersion}"
        }
    }.writeTo("maven/me/deftware/EMC/${version}-${project.minecraftVersion}/EMC-${version}-${project.minecraftVersion}.pom")
}

task copyBuilds(type: Copy) {
    from "$rootDir/build/libs"
    into "$rootDir/maven/me/deftware/" + (forgeBuild ? "EMC-Forge" : "EMC") + "/${version}-${project.minecraftVersion}/"
    if (forgeBuild) {
        rename { String fileName ->
            fileName.replace("EMC", "EMC-Forge")
        }
    }
    rename { String fileName ->
        fileName.replace(version, "${version}-${project.minecraftVersion}")
    }
    doLast {
        project.ant.checksum(file: "$rootDir/maven/me/deftware/" + (forgeBuild ? "EMC-Forge" : "EMC") + "/${version}-${project.minecraftVersion}/" + (forgeBuild ? "EMC-Forge" : "EMC") + "-${version}-${project.minecraftVersion}.jar", algorithm: "sha1", todir: "$rootDir/maven/me/deftware/" + (forgeBuild ? "EMC-Forge" : "EMC") + "/${version}-${project.minecraftVersion}/")
    }
}

reobf {
    shadowJar {
        mappingType = forgeBuild ? 'SEARGE' : 'NOTCH'
        classpath = sourceSets.main.compileClasspath
    }
}

if (forgeBuild) {
    jar {
        manifest.attributes(
                "EMC-Version": version,
                "EMC-ForgeBuild": forgeBuild,
                "MixinConfigs": 'mixins.emc.json',
                "tweakClass": 'org.spongepowered.asm.launch.MixinTweaker',
                "TweakOrder": 0,
                "FMLCorePluginContainsFMLMod": 'me.deftware.forge.MixinLoader',
                "Manifest-Version": 1.0
        )
    }
} else {
    jar {
        manifest.attributes(
                "EMC-Version": version,
                "EMC-ForgeBuild": forgeBuild,
                "Manifest-Version": 1.0
        )
    }
}

println "Building EMC ${version} for " + (forgeBuild ? "Forge" : "Vanilla Minecraft") + "..."
delete "$rootDir/build/libs"
build.dependsOn(shadowJar)
if (!forgeBuild) {
    build.dependsOn(createPom)
}

build.dependsOn(copyBuilds)

tasks.build.doLast(){
    if (forgeBuild) {
        copy {
            from "$rootDir/build/libs/EMC-${version}.jar"
            into "$rootDir/run/mods/"
            rename("EMC-${version}.jar", "EMC.jar")
        }
    }
}

// Only applicable for some versions
def copyDir = "$compileJava.temporaryDir/replaced"
task tokenReplace(type: Copy) {
    from(sourceSets.main.java.sourceDirectories)
    into copyDir
    filter(ReplaceTokens, tokens: [FORGE: forgeBuild.toString()])
}
compileJava.setSource(copyDir)
compileJava.dependsOn(tokenReplace)
