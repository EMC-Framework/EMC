import net.fabricmc.loom.LoomGradlePlugin
import org.gradle.internal.os.OperatingSystem

buildscript {
	repositories {
		maven { url = "https://maven.fabricmc.net/" }
		maven { url = "https://plugins.gradle.org/m2/" }
		mavenCentral()
	}
	dependencies {
		classpath "io.freefair.gradle:lombok-plugin:5.1.1"
		classpath "net.fabricmc:fabric-loom:0.7-SNAPSHOT"
	}
}

apply plugin: "io.freefair.lombok"
apply plugin: LoomGradlePlugin
apply plugin: 'maven'

sourceCompatibility = targetCompatibility = 1.8

def getVersionFromJava() {
	def ver = 0.0, patch = 0
	def versionClass = file("src/main/java/me/deftware/client/framework/FrameworkConstants.java").text
	(versionClass =~ ~/double\s+([_a-zA-Z\u0024][_a-zA-Z0-9\u0024]*)\s+=\s+(([0-9]+)\.([0-9]+))/).each {
		ver = it[2]
	}
	(versionClass =~ ~/int\s+([_a-zA-Z$][_a-zA-Z0-9$]*)\s+=\s+([0-9]+)/).each {
		if (it[1].toString() == "PATCH") {
			patch = it[2]
		}
	}
	return "${ver}.${patch}".toString()
}

def minecraftRoot = System.getenv('APPDATA') + "/.minecraft"
if (OperatingSystem.current().isMacOsX()) {
	minecraftRoot = System.getenv('HOME') + "/Library/Application Support/minecraft"
} else if (OperatingSystem.current().isLinux()) {
	minecraftRoot = System.getenv('HOME') + "/.minecraft"
}
def mcVersion = "${project.minecraftVersion}"
def mappingsVer = "${mcVersion}${project.mappingsVer}"
version = getVersionFromJava()

repositories {
	maven { url = 'https://maven.fabricmc.net' }
	maven { url = 'https://gitlab.com/EMC-Framework/maven/raw/master/' }
	mavenCentral()
}

dependencies {
	minecraft "com.mojang:minecraft:${mcVersion}"
	mappings "net.fabricmc:yarn:${mappingsVer}:v2"
	implementation 'com.google.code.findbugs:jsr305:3.0.2'
	modImplementation "net.fabricmc:fabric-loader:0.9.2+build.206"
	modImplementation 'com.github.modmuss50:Fabric-ASM:b97939c03a'
	include 'com.github.modmuss50:Fabric-ASM:b97939c03a'
	implementation files("deps/mocked.jar")
}

sourceSets {

	mock {
		compileClasspath += main.compileClasspath
	}

}

task mockJar(type: Jar) {
	archiveFileName = "mocked.jar"
	from sourceSets.mock.output
}

minecraft {
	refmapName = 'mixins.emc.refmap.json'
}

//noinspection GroovyAssignabilityCheck
task createPom {
	doLast {
		pom {
			//noinspection GroovyAssignabilityCheck
			project {
				groupId "me.deftware"
				artifactId "EMC-F-v2"
				version "${version}-${mcVersion}"
			}
		}.writeTo("maven/me/deftware/EMC-F-v2/${version}-${mcVersion}/EMC-F-v2-${version}-${mcVersion}.pom")
	}
}

//noinspection GroovyAssignabilityCheck
task generateApiDocumentation(type: Javadoc) {
	source = ['src/main/java/me/deftware/client']
	title = "EMC Framework Documentation"
	destinationDir = file("docs")
	failOnError false
}

//noinspection GroovyAssignabilityCheck
task sourcesJar(type: Jar, dependsOn: classes) {
	archiveClassifier = 'sources'
	from sourceSets.main.allSource
}

//noinspection GroovyAssignabilityCheck
task copyBuilds(type: Copy) {
	from "$rootDir/build/libs/EMC-${version}.jar"
	into "$rootDir/maven/me/deftware/EMC-F-v2/${version}-${mcVersion}/"
	rename { String fileName ->
		fileName.replace("${version}", "${version}-${mcVersion}").replace("EMC", "EMC-F-v2")
	}
	doLast {
		project.ant.checksum(file: "$rootDir/maven/me/deftware/EMC-F-v2/${version}-${mcVersion}/EMC-F-v2-${version}-${mcVersion}.jar", algorithm: "sha1", todir: "$rootDir/maven/me/deftware/EMC-F-v2/${version}-${mcVersion}/")
	}
}

//noinspection GroovyAssignabilityCheck
task copyToMinecraft(type: Copy) {
	from "$rootDir/build/libs/EMC-${version}.jar"
	into "${minecraftRoot}/libraries/me/deftware/EMC-F-v2/${version}-${mcVersion}/"
	rename { String fileName ->
		fileName.replace("EMC", "EMC-F-v2").replace(".jar", "-${mcVersion}.jar")
	}
}

build.dependsOn(createPom)
build.finalizedBy(copyBuilds)
copyToMinecraft.dependsOn(build)
